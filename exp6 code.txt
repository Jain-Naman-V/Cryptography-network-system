// TCP Server (Encryption)
#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <cmath>

// ElGamal parameters
const int q = 23; // Prime number (public)
const int g = 5;  // Generator (public)
const int a = 6;  // Private key (server-side)

// Modular exponentiation
int power(int x, int y, int p) {
    int res = 1;
    x = x % p;
    while (y > 0) {
        if (y % 2 == 1)
            res = (res * x) % p;
        y = y / 2;
        x = (x * x) % p;
    }
    return res;
}

// Encrypt message using ElGamal
int encrypt(int msg) {
    int k = 4; // Random value (server-side)
    int c1 = power(g, k, q);
    int c2 = (msg * power(a, k, q)) % q;
    return c2;
}

int main() {
    int sockfd, newsockfd, portno;
    char buffer[1024];
    struct sockaddr_in serv_addr, cli_addr;

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        return 1;
    }

    // Initialize server address
    portno = 12345; // Choose any available port
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

    // Bind the socket to the server address
    if (bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Binding failed");
        return 1;
    }

    // Listen for incoming connections
    listen(sockfd, 5);
    socklen_t clilen = sizeof(cli_addr);

    // Accept a client connection
    newsockfd = accept(sockfd, (struct sockaddr*)&cli_addr, &clilen);
    if (newsockfd < 0) {
        perror("Error accepting connection");
        return 1;
    }

    // Read encrypted data from client
    bzero(buffer, sizeof(buffer));
    read(newsockfd, buffer, sizeof(buffer));
    int encrypted_msg = atoi(buffer);

    // Decrypt the message
    int decrypted_msg = (encrypted_msg * power(power(c1, a, q), q - 1 - a, q)) % q;

    std::cout << "Decrypted Message: " << decrypted_msg << std::endl;

    close(newsockfd);
    close(sockfd);
    return 0;
}
__________________________________
// TCP Client (Decryption)
#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main() {
    int sockfd, portno;
    char buffer[1024];
    struct sockaddr_in serv_addr;

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        return 1;
    }

    // Initialize server address
    portno = 12345; // Use the same port as the server
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); // Server IP address
    serv_addr.sin_port = htons(portno);

    // Connect to the server
    if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection failed");
        return 1;
    }

    // Encrypt a message (e.g., 10) using ElGamal
    int msg_to_encrypt = 10;
    int encrypted_msg = (msg_to_encrypt * power(g, a, q)) % q;

    // Send encrypted data to server
    snprintf(buffer, sizeof(buffer), "%d", encrypted_msg);
    write(sockfd, buffer, strlen(buffer));

    close(sockfd);
    return 0;
}
________________________
with user input
// TCP Server (Encryption) - Modified to take user input for q and g
#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <cmath>

// ElGamal parameters
int q, g; // User-defined values
const int a = 6; // Private key (server-side)

// Modular exponentiation
int power(int x, int y, int p) {
    int res = 1;
    x = x % p;
    while (y > 0) {
        if (y % 2 == 1)
            res = (res * x) % p;
        y = y / 2;
        x = (x * x) % p;
    }
    return res;
}

// Encrypt message using ElGamal
int encrypt(int msg) {
    int k = 4; // Random value (server-side)
    int c1 = power(g, k, q);
    int c2 = (msg * power(a, k, q)) % q;
    return c2;
}

int main() {
    std::cout << "Enter the value of q: ";
    std::cin >> q;
    std::cout << "Enter the value of g: ";
    std::cin >> g;

    int sockfd, newsockfd, portno;
    char buffer[1024];
    struct sockaddr_in serv_addr, cli_addr;

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        return 1;
    }

    // Initialize server address
    portno = 12345; // Choose any available port
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

    // Bind the socket to the server address
    if (bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Binding failed");
        return 1;
    }

    // Listen for incoming connections
    listen(sockfd, 5);
    socklen_t clilen = sizeof(cli_addr);

    // Accept a client connection
    newsockfd = accept(sockfd, (struct sockaddr*)&cli_addr, &clilen);
    if (newsockfd < 0) {
        perror("Error accepting connection");
        return 1;
    }

    // Read encrypted data from client
    bzero(buffer, sizeof(buffer));
    read(newsockfd, buffer, sizeof(buffer));
    int encrypted_msg = atoi(buffer);

    // Decrypt the message
    int decrypted_msg = (encrypted_msg * power(power(c1, a, q), q - 1 - a, q)) % q;

    std::cout << "Decrypted Message: " << decrypted_msg << std::endl;

    close(newsockfd);
    close(sockfd);
    return 0;
}
_______________________________________
// TCP Client (Decryption) - Modified to take user input for q and g
#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main() {
    int sockfd, portno;
    char buffer[1024];
    struct sockaddr_in serv_addr;

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        return 1;
    }

    // Initialize server address
    portno = 12345; // Use the same port as the server
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); // Server IP address
    serv_addr.sin_port = htons(portno);

    // Connect to the server
    if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection failed");
        return 1;
    }

    // Encrypt a message (e.g., 10) using ElGamal
    int msg_to_encrypt = 10;
    int encrypted_msg = (msg_to_encrypt * power(g, a, q)) % q;

    // Send encrypted data to server
    snprintf(buffer, sizeof(buffer), "%d", encrypted_msg);
    write(sockfd, buffer, strlen(buffer));

    close(sockfd);
    return 0;
}
kali
